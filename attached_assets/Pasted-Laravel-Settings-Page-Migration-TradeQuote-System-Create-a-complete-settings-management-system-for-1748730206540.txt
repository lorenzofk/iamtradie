Laravel Settings Page Migration - TradeQuote System
Create a complete settings management system for a trade quote application with the following specifications:

Database Migration (User Table)
Schema::table('users', function (Blueprint $table) {
    // Profile fields
    $table->string('first_name')->nullable();
    $table->string('last_name')->nullable();
    $table->string('phone')->nullable();
    
    // Business fields
    $table->string('industry_type')->nullable(); // electrical, plumbing, tiling, carpentry, painting, general
    
    // Pricing settings
    $table->decimal('callout_fee', 10, 2)->nullable();
    $table->decimal('hourly_rate', 10, 2)->nullable();
    
    // AI Response preferences
    $table->string('response_tone')->default('casual'); // casual, polite, professional
    $table->text('preferred_cta')->nullable(); // Custom call-to-action text
    
    // Auto-send settings
    $table->boolean('auto_send_sms')->default(false);
    $table->boolean('auto_send_email')->default(false);
    
    // SMS integration
    $table->string('twilio_number')->nullable();
    
    // Usage tracking
    $table->integer('quotes_used')->default(0);
    $table->integer('quotes_limit')->default(100);
    
    // Stripe billing
    $table->string('stripe_customer_id')->nullable();
    $table->string('stripe_subscription_id')->nullable();
});
Form Request Validation
class UpdateUserSettingsRequest extends FormRequest
{
    public function rules()
    {
        return [
            'first_name' => 'required|string|max:255',
            'last_name' => 'required|string|max:255',
            'email' => 'required|email|unique:users,email,' . auth()->id(),
            'phone' => 'nullable|string|max:20',
            'industry_type' => 'required|in:electrical,plumbing,tiling,carpentry,painting,general',
            'callout_fee' => 'required|numeric|min:0',
            'hourly_rate' => 'required|numeric|min:0',
            'response_tone' => 'required|in:casual,polite,professional',
            'auto_send_sms' => 'boolean',
            'auto_send_email' => 'boolean',
            'preferred_cta' => 'nullable|string|max:500',
        ];
    }
}
Controller Implementation
class SettingsController extends Controller
{
    public function show()
    {
        $user = auth()->user();
        return view('settings.index', compact('user'));
    }
    
    public function update(UpdateUserSettingsRequest $request)
    {
        $user = auth()->user();
        
        $user->update([
            'first_name' => $request->first_name,
            'last_name' => $request->last_name,
            'email' => $request->email,
            'phone' => $request->phone,
            'industry_type' => $request->industry_type,
            'callout_fee' => $request->callout_fee,
            'hourly_rate' => $request->hourly_rate,
            'response_tone' => $request->response_tone,
            'auto_send_sms' => $request->boolean('auto_send_sms'),
            'auto_send_email' => $request->boolean('auto_send_email'),
            'preferred_cta' => $request->preferred_cta,
        ]);
        
        return back()->with('success', 'Settings updated successfully!');
    }
    
    public function assignTwilioNumber()
    {
        // Implement Twilio phone number assignment logic
        // Return JSON response for AJAX calls
    }
}
Frontend (Blade Template Structure)
Create a responsive settings page with these sections:

1. Profile Information Card
First Name / Last Name (required)
Email (required, unique)
Phone Number (optional)
Industry Type dropdown (required)
2. Base Pricing Card
Callout Fee (required, numeric)
Hourly Rate (required, numeric)
Helper text: "Set your standard rates for AI to include in quote responses"
3. Response Preferences Card
Response Tone dropdown: Casual & Friendly, Polite & Respectful, Professional & Formal
Preferred Call-to-Action textarea
Auto-send SMS toggle with description
Auto-send Email toggle with description
4. SMS Integration Card
Display assigned Twilio number if exists
"Get SMS Number" button if no number assigned
Copy to clipboard functionality
Usage instructions when number is assigned
Key Features to Implement:
Form Validation: Real-time validation with Laravel's built-in validation
Toggle Switches: For auto-send SMS/email preferences
AJAX Form Submission: Seamless updates without page reload
Toast Notifications: Success/error feedback
Loading States: Show spinner during form submission
Copy to Clipboard: For SMS number sharing
CSS Framework Suggestions:
Use Tailwind CSS for responsive design
Card-based layout with proper spacing
Switch components for boolean toggles
Input validation styling
JavaScript Requirements:
Form submission with AJAX
Toggle switch interactions
Copy to clipboard functionality
Loading state management
Toast notification system
This implementation provides a complete settings management system that matches your current Node.js/React functionality while following Laravel best practices.